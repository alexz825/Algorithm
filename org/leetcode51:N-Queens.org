* N-Queens
** 思路
   解决这类问题,通常都用回溯法,也可以叫对决策树的深度优先搜索,n皇后问题可以用一个数组来表示皇后的位置,比如[1,3,0,2],在0行为第一列,以此类推.每进行一步check一下当前位置是否可以放置,如此递归即可.
** 代码
#+BEGIN_SRC python
class Solution:
    # @return a list of lists of string
    def solveNQueens(self, n):
        def check(k, j):  # check if the kth queen can be put in column j!
            for i in range(k):
                if board[i] == j or abs(k-i) == abs(board[i] - j):
                    return False
            return True
        def dfs(depth, valuelist):
            if depth == n: res.append(valuelist); return
            for i in range(n):
                if check(depth,i): 
                    board[depth] = i
                    s='.' * n
                    dfs(depth + 1, valuelist + [s[:i] + 'Q' + s[i+1:]])
        board = [-1 for i in range(n)] # 保存所有皇后的位置
        res = []
        dfs(0, [])
        return res
#+END_SRC
* 52: N-queens II
** 介绍
   这题是接上题存在的，不过不是输出皇后摆放结果，而是输出总共有多少种解法。
** 思路
** 代码
   #+BEGIN_SRC python
     class Solution:
	 def totalNQueens(self, n):
	     """
	     :type n: int
	     :rtype: int
	     """
	     res = 0
	     global res
	     board = [-1 for i in range(n)] # 保存所有皇后的位置
	     # @return a list of lists of string
	     def check(k, j):  # check if the kth queen can be put in column j!
		 for i in range(k):
		     if board[i] == j or abs(k-i) == abs(board[i] - j):
			 return False
		 return True
	     def dfs(depth, valuelist):
		 global res
		 if depth == n:
		     res = res + 1
		 for i in range(n):
		     if check(depth,i): 
			 board[depth] = i
			 s='.' * n
			 dfs(depth + 1, valuelist + [s[:i] + 'Q' + s[i+1:]])
	     dfs(0, [])
	     return res
   #+END_SRC
